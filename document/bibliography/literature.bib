@article{eisenberg,
  author    = {Richard Eisenberg},
  title     = {Dependent Types in Haskell: Theory and Practice},
  journal   = {CoRR},
  volume    = {abs/1610.07978},
  year      = {2016},
  url       = {http://arxiv.org/abs/1610.07978},
  archivePrefix = {arXiv},
  eprint    = {1610.07978},
  timestamp = {Mon, 13 Aug 2018 16:47:17 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/Eisenberg16},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@phdthesis{gundry,
  author    = {Adam Gundry},
  title     = {Type Inference, Haskell and Dependent Types},
  school    = {University of Strathclyde},
  year      = {2013},
}

@inproceedings{liquidhaskell,
    author = {Niki Vazou and Eric L. Seidel and Ranjit Jhala},
    title = {LiquidHaskell: Experience with refinement types in the real world},
    year = {2014}
}

@inproceedings{steve_acm,
    note = {Steve Klabnik},
    title = {The History of Rust},
    booktitle = {Applicative 2016},
    year = {2016},
    isbn = {978-1-4503-4464-7},
    location = {New York, NY, USA},
    url = {http://doi.acm.org/10.1145/2959689.2960081},
    doi = {10.1145/2959689.2960081},
    acmid = {2960081},
    publisher = {ACM},
    address = {New York, NY, USA},
} 

@inbook{ownership_types,
    author="Clarke, Dave
    and {\"O}stlund, Johan
    and Sergey, Ilya
    and Wrigstad, Tobias",
    editor="Clarke, Dave
    and Noble, James
    and Wrigstad, Tobias",
    title="Ownership Types: A Survey",
    bookTitle="Aliasing in Object-Oriented Programming. Types, Analysis and Verification",
    year="2013",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="15--58",
    abstract="Ownership types were devised nearly 15 years ago to provide a stronger notion of protection to object-oriented programming languages. Rather than simply protecting the fields of an object from external access, ownership types protect also the objects stored in the fields, thereby enabling an object to claim (exclusive) ownership of and access to other objects. Furthermore, this notion is statically enforced by now-standard type-checking techniques.",
    isbn="978-3-642-36946-9",
    doi="10.1007/978-3-642-36946-9_3",
    url="https://doi.org/10.1007/978-3-642-36946-9_3"
}

@article{traits,
    author = {Ducasse, St{\'e}phane and Nierstrasz, Oscar and Sch\"{a}rli, Nathanael and Wuyts, Roel and Black, Andrew P.},
    title = {Traits: A Mechanism for Fine-grained Reuse},
    journal = {ACM Trans. Program. Lang. Syst.},
    issue_date = {March 2006},
    volume = {28},
    number = {2},
    month = mar,
    year = {2006},
    issn = {0164-0925},
    pages = {331--388},
    numpages = {58},
    url = {http://doi.acm.org/10.1145/1119479.1119483},
    doi = {10.1145/1119479.1119483},
    acmid = {1119483},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {Languages, Smalltalk, inheritance, mixins, multiple inheritance, reuse, traits},
}

@phdthesis{agda,
    author = {Ulf Norell},
    title = {Towards a practical programming language based on dependent type theory},
    year = {2007},
    school = {Chalmers University of Technology}
}

@inproceedings{cayenne,
    author = {Lennart Augustsson},
    title = {Cayenne -- a Language With Dependent Types},
    year = {1998},
    pages = {239--250},
    publisher = {ACM Press}
}

@article{idris,
    author = {Edwin Brady},
    year = {2013},
    month = {09},
    title = {Idris, a general-purpose dependently typed programming language: Design and implementation},
    volume = {23},
    journal = {Journal of Functional Programming},
    doi = {10.1017/S095679681300018X}
}

@book{templates,
 author = {David Vandevoorde and Nicolai M. Josuttis and Douglas Gregor},
 title = {C++ Templates: The Complete Guide (2nd Edition)},
 year = {2017},
 isbn = {0321714121, 9780321714121},
 edition = {2nd},
 publisher = {Addison-Wesley Professional},
} 

